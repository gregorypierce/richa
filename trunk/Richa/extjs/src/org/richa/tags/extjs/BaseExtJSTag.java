package org.richa.tags.extjs;

import java.util.Iterator;

import org.apache.commons.jelly.JellyTagException;
import org.apache.commons.jelly.MapTagSupport;
import org.apache.commons.jelly.XMLOutput;
import org.richa.metadata.ContainerMetaData;
import org.richa.runner.RichaRunner;
import org.richa.util.AppendingStringBuffer;
import org.xml.sax.SAXException;

/**
 * <p>
 * <code>BaseExtJSTag</code> is a DynaTag implementation which uses a Map to store
 * its attribute values in. Derived tags can then process this Map, change
 * values, add or remove attributes or perform some other form of processsing
 * pretty easily.
 * </p>
 */

public abstract class BaseExtJSTag extends MapTagSupport
{
	private static final String TRUE = "true" ;
	private static final String FALSE = "false" ;
	
	/**
	 * Script Buffer
	 */
	protected AppendingStringBuffer scriptBuffer ;
	
	/**
	 * Current Active Page
	 */
	protected ContainerMetaData currentPage ;

	/**
	 * Current Active form
	 */
	protected ContainerMetaData currentForm ;
	
	/**
	 * Current Active tabpanel name
	 */
	protected String currentTabPanelName ;
	
	/**
	 * Current Active border layout name
	 */
	protected String currentBorderLayoutName ;
	
	/**
	 * Name of the web context
	 */
	protected String webContext ;
	
	/**
	 * Javascript name that will be generated by the tag
	 */
	protected String objectName ;
	
	/**
	 * true indicates the engine will skip all the subelements of this tag
	 */
	protected boolean skipBody = false;
	
	/**
	 * Get the javascript object name of the tag
	 * @return
	 */
	protected String getObjectName()
	{
		return (null) ;
	}
	
	/**
	 * Get the name of the tag
	 * @return
	 */
	protected String getName()
	{
		return ((String) getAttributes().get("name")) ;
	}
	
	/**
	 * Get the id of the tag
	 * @return
	 */
	protected String getId()
	{
		return ((String)getAttributes().get("id")) ;
	}
	
	/**
	 * Get the class of the tag
	 * @return
	 */
	protected String getStyle()
	{
		return ((String)getAttributes().get("class")) ;
	}
	
	/**
	 * Default method for processing before the body
	 * @throws JellyTagException
	 */
	protected void beforeBody(final XMLOutput output) throws JellyTagException, SAXException
	{	
	}
	
	/**
	 * Default method for processing after the body
	 * @throws JellyTagException
	 */
	protected void afterBody(final XMLOutput output) throws JellyTagException, SAXException
	{	
	}
	
	/**
	 * Skip the subelements of the current tag
	 */
	protected void skipBody()
	{
		skipBody = true ;
	}
	
	//	 Tag interface
    //-------------------------------------------------------------------------
    public void doTag(final XMLOutput output) throws JellyTagException
    {
    	try
    	{
    		//Get the Script Buffer
    		scriptBuffer = (AppendingStringBuffer)(getContext().findVariable(RichaRunner.SCRIPTBUFFER)) ;

    		//Get the Web Context
    		webContext = (String)(getContext().findVariable(RichaRunner.WEBCONTEXT)) ;

    		//Get the current page
    		currentPage = (ContainerMetaData)(getContext().findVariable(RichaRunner.CURRENTPAGE));

    		//Get the current form
    		currentForm = (ContainerMetaData)(getContext().findVariable(RichaRunner.CURRENTFORM));
    		
    		//Get the current tab panel name
    		currentTabPanelName = (String)(getContext().findVariable(RichaRunner.CURRENTTABPANELNAME)) ;
    		
    		//Get the current border layout name
    		currentBorderLayoutName = (String)(getContext().findVariable(RichaRunner.CURRENTBORDERLAYOUTNAME)) ;
    		
	    	//Call the before 
	    	beforeBody(output);
	    	
	    	//Does the body need to be skipped
	    	if (!skipBody)
	    		invokeBody(output) ;
	    	
	    	//Call the after
	    	afterBody(output);
    	}
    	catch (Exception exp)
    	{
    		throw new JellyTagException(exp) ;
    	}
    }
 
    /**
     * Check if the value is empty
     * @param value
     * @return if it is empty
     */
    protected boolean isEmpty(String value)
    {
    	if ((value == null) || (value.trim().equals("")))
    		return true ;
    	else
    		return false ;
    }
    
    /**
     * Check if the value is numeric
     * @param value
     * @return true, if it is numeric
     */
    protected boolean isNumber(String value)
    {
    	boolean isNumber = false ;
    	if (isEmpty(value))
    		return isNumber ;
    	
    	try
    	{
    		Double.parseDouble(value) ;
    		isNumber = true ;
    	}
    	catch (NumberFormatException e)
    	{}
    	
    	return (isNumber) ;
    }
    
    /**
     * Check if the value is a boolean
     * @param value
     * @return true, if it is boolean
     */
    protected boolean isBoolean(String value)
    {
    	if (isEmpty(value))
    		return false ;
    	
    	value = value.toLowerCase() ;
    	if (value.equals(TRUE) || value.equals(FALSE))
    		return true ;
    	else
    		return false ;
    }    
    
    /**
     * Serialize all the attributes in the tag
     */
    protected void serializeAttributes()
    {
    	//Get the iterator
    	Iterator attrs = getAttributes().keySet().iterator();
    	
    	//Loop through the keys except name and serialize it
    	while (attrs.hasNext())
    	{
    		String name = (String) attrs.next() ;
       		if (attrs.hasNext())
       			scriptBuffer.appendln("        " + name + ":" + serializeValue((String)getAttributes().get(name)) + ",") ;
       		else
       			scriptBuffer.appendln("        " + name + ":" + serializeValue((String)getAttributes().get(name))) ;       			
    	}	
    }
    
    /**
     * Serialize one value ;
     * @param value
     * @return
     */
    protected String serializeValue(String value)
    {
    	if (isEmpty(value))
    		return "''" ;
    	
    	if (isNumber(value))
    		return value ;
    	
    	if (isBoolean(value))
    		return value ;
    	
    	return ("'" + value + "'") ;
    }
    
    /**
     * Get the attribute value
     * @param name
     * @return value
     */
    protected String getAttribute(String name)
    {
    	return (String)getAttributes().get(name) ;
    }

    /**
     * Get the current page
     * @return
     */
    protected ContainerMetaData getCurrentPage()
    {
    	return currentPage ;
    }
    
    /**
     * Set the current form name
     * @return
     */
    protected void setCurrentPage(ContainerMetaData page)
    {
    	context.setVariable(RichaRunner.CURRENTPAGE, page) ;
    }
    
    /**
     * Clear the current form name
     * @return
     */
    protected void clearCurrentPage()
    {
    	context.setVariable(RichaRunner.CURRENTPAGE, null) ;
    }

    
    /**
     * Get the current form name
     * @return
     */
    protected ContainerMetaData getCurrentForm()
    {
    	return currentForm ;
    }
    
    /**
     * Set the current form name
     * @return
     */
    protected void setCurrentForm(ContainerMetaData form)
    {
    	context.setVariable(RichaRunner.CURRENTFORM, form) ;
    }
    
    /**
     * Clear the current form name
     * @return
     */
    protected void clearCurrentForm()
    {
    	context.setVariable(RichaRunner.CURRENTFORM, null) ;
    }
    
    /**
     * Get the current tab panel name
     * @return
     */
    protected String getCurrentTabPanelName()
    {
    	return currentTabPanelName ;
    }
    
    /**
     * Set the current tab panel name
     * @return
     */
    protected void setCurrentTabPanelName(String name)
    {
    	context.setVariable(RichaRunner.CURRENTTABPANELNAME, name) ;
    }
    
    /**
     * Clear the current tab panel name
     * @return
     */
    protected void clearCurrentTabPanelName()
    {
    	context.setVariable(RichaRunner.CURRENTTABPANELNAME, null) ;
    }
    
    /**
     * Get the current border layout name
     * @return
     */
    protected String getCurrentBorderLayoutName()
    {
    	return currentBorderLayoutName ;
    }
    
    /**
     * Set the current border layout name
     * @return
     */
    protected void setCurrentBorderLayoutName(String name)
    {
    	context.setVariable(RichaRunner.CURRENTBORDERLAYOUTNAME, name) ;
    }
    
    /**
     * Clear the current border layout name
     * @return
     */
    protected void clearCurrentBorderLayoutName()
    {
    	context.setVariable(RichaRunner.CURRENTBORDERLAYOUTNAME, null) ;
    }
    
    /**
	 * Serialize the creation of the the tag and its attributes
	 */
	protected void serializeCreation()
	{	
		scriptBuffer.appendln("    var " + getName() + " = new " + getObjectName() + "({");
		
		//Serialize all the attributes
		serializeAttributes() ;
		
		scriptBuffer.appendln("    });") ;
	}    
}
