package org.richa.tags.extjs;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;

import org.apache.commons.jelly.JellyTagException;
import org.apache.commons.jelly.MapTagSupport;
import org.apache.commons.jelly.XMLOutput;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mvel.MVEL;
import org.richa.config.Application;
import org.richa.runner.RichaRunner;
import org.richa.util.AppendingStringBuffer;
import org.xml.sax.SAXException;

/**
 * <p>
 * <code>BaseExtJSTag</code> is a DynaTag implementation which uses a Map to store
 * its attribute values in. Derived tags can then process this Map, change
 * values, add or remove attributes or perform some other form of processsing
 * pretty easily.
 * </p>
 */

public abstract class BaseExtJSTag extends MapTagSupport implements TagConstants
{
	protected static Log log = LogFactory.getLog(BaseExtJSTag.class);
	
	private static final String TRUE = "true" ;
	private static final String FALSE = "false" ;
	
	private static final String RICHADISPATCHEVENT = "RichaDispatchEvent" ;
	private static final String RICHABINDEVENT = "RichaBindEvent" ;
	
	/**
	 * Script Buffer
	 */
	protected AppendingStringBuffer scriptBuffer ;
	
	/**
	 * EventHandler Buffer
	 */
	protected AppendingStringBuffer eventBuffer ;
	
	/**
	 * Current Active form
	 */
	protected String currentForm ;
	
	/**
	 * Current Active tabpanel name
	 */
	protected String currentTabPanelName ;
	
	/**
	 * Current Active border layout name
	 */
	protected String currentBorderLayoutName ;
	
	/**
	 * Name of the web context
	 */
	protected String webContext ;
	
	/**
	 * Javascript name that will be generated by the tag
	 */
	protected String objectName ;
	
	/**
	 * Listener Stack 
	 */
	protected Stack<String> listenerStack ;
	
	/**
	 * true indicates the engine will skip all the subelements of this tag
	 */
	protected boolean skipBody = false;
	
	/**
	 * Get the javascript object name of the tag
	 */
	protected String getObjectName()
	{
		return (null) ;
	}
	
	/**
	 * Get the name of the tag
	 */
	protected String getName()
	{
		return ((String) getAttributes().get(NAME)) ;
	}
	
	/**
	 * Get the id of the tag
	 */
	protected String getId()
	{
		return ((String)getAttributes().get(ID)) ;
	}
	
	/**
	 * Get the CSS Style of the tag
	 */
	protected String getStyle()
	{
		return ((String)getAttributes().get(CLASS)) ;
	}
	
	/**
	 * Default method for processing before the body
	 */
	protected void beforeBody(final XMLOutput output) throws JellyTagException, SAXException
	{	
	}
	
	/**
	 * Default method for processing after the body
	 */
	protected void afterBody(final XMLOutput output) throws JellyTagException, SAXException
	{	
	}
	
	/**
	 * Skip the subelements of the current tag
	 */
	protected void skipBody()
	{
		skipBody = true ;
	}

	/**
	 * Default implementation of the Jelly Tag interface
	 */
    public void doTag(final XMLOutput output) throws JellyTagException
    {
    	try
    	{
    		//Process all expressions in the tag
    		processExpressions() ;
    		
    		//Check if this tag needs to be rendered
    		Object render = getAttribute(RENDER) ;
    		if (render != null && render instanceof Boolean)
    		{
    			if (render.equals(Boolean.FALSE))
    				return ;
    		}
    		
    		//Get the Script Buffer
    		scriptBuffer = (AppendingStringBuffer)(getContext().findVariable(RichaRunner.SCRIPTBUFFER)) ;
    		
    		//Get the Event Buffer 
    		eventBuffer = (AppendingStringBuffer)(getContext().findVariable(RichaRunner.EVENTBUFFER)) ;

    		//Get the Web Context
    		webContext = (String)(getContext().findVariable(RichaRunner.WEBCONTEXT)) ;

    		//Get the current form
    		currentForm = (String)(getContext().findVariable(RichaRunner.CURRENTFORM));
    		
    		//Get the current tab panel name
    		currentTabPanelName = (String)(getContext().findVariable(RichaRunner.CURRENTTABPANELNAME)) ;
    		
    		//Get the current border layout name
    		currentBorderLayoutName = (String)(getContext().findVariable(RichaRunner.CURRENTBORDERLAYOUTNAME)) ;
    		
    		//Get the listener stack
    		listenerStack = (Stack<String>)(getContext().findVariable(RichaRunner.LISTENERSTACK)) ;
    		
	    	//Call the before 
	    	beforeBody(output);
	    	
	    	//Does the body need to be skipped
	    	if (!skipBody)
	    		invokeBody(output) ;
	    	
	    	//Call the after
	    	afterBody(output);
    	}
    	catch (Exception exp)
    	{
    		throw new JellyTagException(exp) ;
    	}
    }
 
    /**
     * Check if the attribute value is empty
     */
    protected boolean isEmpty(String value)
    {
    	if ((value == null) || (value.trim().equals("")))
    		return true ;
    	else
    		return false ;
    }
    
    /**
     * Check if the attribute value is numeric
     */
    protected boolean isNumber(String value)
    {
    	boolean isNumber = false ;
    	if (isEmpty(value))
    		return isNumber ;
    	
    	try
    	{
    		Double.parseDouble(value) ;
    		isNumber = true ;
    	}
    	catch (NumberFormatException e)
    	{}
    	
    	return (isNumber) ;
    }
    
    /**
     * Check if the attribute value is a boolean
     */
    protected boolean isBoolean(String value)
    {
    	if (isEmpty(value))
    		return false ;
    	
    	value = value.toLowerCase() ;
    	if (value.equals(TRUE) || value.equals(FALSE))
    		return true ;
    	else
    		return false ;
    }    
   
	/**
     * Serialize the creation of the the tag and its attributes. 
     * If the add parameter is set to true, the object is also added to the active container
     */
    protected void serialize(boolean add)
    {   
	    scriptBuffer.appendln("    var " + getName() + " =  new " + getObjectName() + "({");
    	
	    //Serialize the attributes
    	serializeAttributes() ;
    	
    	scriptBuffer.appendln("    });") ;
    	
    	//Add it to the current container
    	if (add)
    		scriptBuffer.appendln("    " + getCurrentFormName() + ".add(" + getName() + ");") ;
    }  
    
    /**
     * Serialize all the attributes in the tag
     */
    protected void serializeAttributes()
    {
    	int i = 0;
    	
    	//Get the iterator
    	Iterator attrs = getAttributes().keySet().iterator();
    	
    	//Loop through the keys except name and serialize it
    	while (attrs.hasNext())
    	{
    		String name = (String) attrs.next() ;
    		
    		if (!excludeParam(name))
    		{
    			scriptBuffer.append("        ") ;
    			if (i > 0)	     	
    				scriptBuffer.append(",") ;
    			
    			if (!objectParam(name))    			
    				scriptBuffer.appendln(name + ":" + serializeValue(getAttributes().get(name))) ;
    			else
    				scriptBuffer.appendln(name + ":" + getAttributes().get(name)) ;
    			i++ ;    			    	
    		}
    	}	
    }
    
    
    /**
     * Serialize all the events in the tag
     */
    protected void serializeEvents() throws JellyTagException
    {
    	//Get the iterator
    	Iterator attrs = getAttributes().keySet().iterator();
    	
    	//Loop through the keys except name and serialize it
    	while (attrs.hasNext())
    	{
    		//Is this is a server side event
    		String name = (String) attrs.next() ;
    		if (name.startsWith(SERVER))
    			serializeEvent(name,SERVER) ;
    		else if (name.startsWith(CLIENT))
    			serializeEvent(name,CLIENT) ;
    	}	
    }
    
    /**
     * Serialize an event
     */
    protected void serializeEvent(String name, String type) throws JellyTagException
    {
    	String senddata = null ;
    	String jshandler = null ;
    	String listener = getCurrentListener() ;
		if (listener == null)
			throw new JellyTagException("A listener is not defined for this tag. Please enclose this tag inside a listener tag.") ;
		
		String eventName = name.substring(type.length()).toLowerCase() ;
		String handler = (String)getAttributes().get(name) ;
		
		//Get send data if it is a server side event
		if (SERVER.equals(type))
		{
			senddata = (String)getAttributes().get(SENDDATA) ;
			if (senddata == null)
				senddata = FIELD ;
			jshandler = RICHADISPATCHEVENT ;
		}
		else
			jshandler = handler ;
		
		
		eventBuffer.appendln("    " + RICHABINDEVENT + "(" + getName() + ",'" + getObjectName() + "','" + eventName + "'," + jshandler + ",'" + listener + "','" + handler + "','" + senddata + "');") ;   		
    }
    
    /**
     * Serialize an attribute based on the data type
     */
    protected String serializeValue(Object value)
    {
    	if (value instanceof String)
    	{
    		String temp = (String)value ;
	    	if (isEmpty(temp))
	    		return "''" ;
	    	
	    	if (isNumber(temp))
	    		return temp ;
	    	
	    	if (isBoolean(temp))
	    		return temp ;
    	}
    	else if (value instanceof java.util.Date)
		{
			SimpleDateFormat fmt = (SimpleDateFormat) Application.getInstance().get("dateformatobj") ;
			
			//Convert the value
			String temp = fmt.format(value) ;
			
			return "'" + temp + "'" ;			
		}
		else if (value instanceof Timestamp)
		{
			SimpleDateFormat fmt = (SimpleDateFormat) Application.getInstance().get("timeformatobj") ;
			
			//Convert the value
			String temp = fmt.format(value) ;
			
			return "'" + temp + "'" ;
		}
    	
    	return ("'" + value + "'") ;
    }
    
    /**
     * Get the attribute value
     */
    protected Object getAttribute(String name)
    {
    	return getAttributes().get(name) ;
    }
    
    /**
     * Get the current form namen
     */
    protected String getCurrentFormName()
    {
    	return currentForm ;
    }
    
    /**
     * Set the current form name
     */
    protected void setCurrentFormName(String name)
    {
    	context.setVariable(RichaRunner.CURRENTFORM, name) ;
    }
    
    /**
     * Clear the current form name
     */
    protected void clearCurrentFormName()
    {
    	context.setVariable(RichaRunner.CURRENTFORM, null) ;
    }
    
    /**
     * Get the current tab panel name
     */
    protected String getCurrentTabPanelName()
    {
    	return currentTabPanelName ;
    }
    
    /**
     * Set the current tab panel name
     */
    protected void setCurrentTabPanelName(String name)
    {
    	context.setVariable(RichaRunner.CURRENTTABPANELNAME, name) ;
    }
    
    /**
     * Clear the current tab panel name
     */
    protected void clearCurrentTabPanelName()
    {
    	context.setVariable(RichaRunner.CURRENTTABPANELNAME, null) ;
    }
    
    /**
     * Get the current border layout name
     */
    protected String getCurrentBorderLayoutName()
    {
    	return currentBorderLayoutName ;
    }
    
    /**
     * Set the current border layout name
     */
    protected void setCurrentBorderLayoutName(String name)
    {
    	context.setVariable(RichaRunner.CURRENTBORDERLAYOUTNAME, name) ;
    }
    
    /**
     * Clear the current border layout name
     */
    protected void clearCurrentBorderLayoutName()
    {
    	context.setVariable(RichaRunner.CURRENTBORDERLAYOUTNAME, null) ;
    }
   
	/**
	 * Get the current listener
	 * @return listener name
	 */
	protected String getCurrentListener()
	{
		if (listenerStack != null)
		{
			try
			{
				String listener = listenerStack.peek() ;
				return listener ;
			}
			catch (Exception e)
			{
				return null ;
			}
		}
		else
			return null ;
	}
	

	/**
	 * Add a new listener on the stack
	 */
	protected void addListener(String name)
	{
		if (listenerStack != null)
			listenerStack.push(name) ;
	}
	
	/**
	 * Remove the current listener
	 */
	protected void removeCurrentListener()
	{
		if (listenerStack != null)
			listenerStack.pop() ;
	}
	
	/**
	 * Does this parameter need to be serialized
	 * @param name
	 */
	protected static boolean excludeParam(String name)
	{
		boolean exclude = false ;
		
		if (name.startsWith(CLIENT)) 
			exclude = true ;
		else if (name.startsWith(SERVER))
			exclude = true ;
		else if (name.equals(PARAMS))
			exclude = true ;
		else if (name.equals(SENDDATA))
			exclude = true ;
		
		return exclude ;
	}

	/**
	 * Does this parameter need to be serialized as an object
	 * @param name
	 */
	protected static boolean objectParam(String name)
	{
		boolean objectParam = false ;
		
		if (name.equals(STORE))
			objectParam = true ;
		
		return objectParam ;
	}

	
	/**
	 * Evaluate an expression
	 */
	protected Object evalExpression(String expr)
	{
		Map variables = (Map) context.getVariable(RichaRunner.BINDINGCONTEXT);
		
		Object value = MVEL.eval(expr,null,variables) ;
		
		return value ;
	}
	
	/**
	 * Process all expressions
	 */
	protected void processExpressions()
	{
    	//Get the iterator
    	Iterator attrs = getAttributes().keySet().iterator();
    	
    	//Loop through the keys except name and serialize it
    	while (attrs.hasNext())
    	{
    		//Is this is a server side event
    		String name = (String) attrs.next() ;
    		
    		//Get the value of the attribute
    		String value = (String)getAttribute(name) ;
    		
    		//Trim all the spaces
    		value = value.trim() ;
    	
    		if (value.startsWith("#{"))
    		{
    			String expr = value.substring(2,value.length() - 1) ;
    			
    			//Evaluate the expression
    			Object evalvalue = evalExpression(expr) ;
    			
    			//Set the attribute
    			setAttribute(name,evalvalue) ;
    		}    		
    	}	
	}
	
	/**
	 * Add a variable to the Binding context
	 */
	protected void addBindingVariable(String name, Object value)
	{
		//Get the variables
		Map<String,Object> variables = (Map<String,Object>) context.getVariable(RichaRunner.BINDINGCONTEXT);
		
		//Add the var
		variables.put(name, value) ;
	}
}
